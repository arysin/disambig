plugins {
    id 'java'
    id 'groovy'
    id 'eclipse'
}

compileJava.options.encoding = 'UTF-8'


group = 'ua.net.nlp'

repositories {
    mavenCentral()
    mavenLocal()
}

boolean nlpUkProjectPresent = new File("${projectDir}/../../spelling/nlp_uk/.project").isFile()


dependencies {
    implementation group: groovyGroup, name: 'groovy', version: groovyVersion
    implementation group: groovyGroup, name: 'groovy-xml', version: groovyVersion

    implementation group:'ch.qos.logback', name:'logback-classic', version:'1.4.+'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'

    implementation("org.languagetool:language-uk:$ltDevVersion") {
        exclude module: 'hunspell'
        exclude module: 'language-detector'
        exclude module: 'lucene-core'
        exclude group: 'org.apache.lucene'
        exclude group: 'io.grpc'
    }
    if( project.hasProperty('morfologik_ukrainian_lt_version') ) {
        implementation("ua.net.nlp:morfologik-ukrainian-lt:${morfologik_ukrainian_lt_version}")
    }
    
    if( ! nlpUkProjectPresent ) {
      implementation group:'ua.net.nlp', name:'nlp_uk', version:'3+'
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.+'
}

sourceSets {
    main {
        resources {
//            srcDir "src/main/groovy"
            //srcDir "src"
//            include "**/*.groovy"
//            includes = ["**/tools/*.md", "*.groovy", "**/*.txt"]
        }
    }
}


compileGroovy {
    groovyOptions.forkOptions.jvmArgs = [ '-Dgroovy.grape.enable=false' ]
}

test {
    useJUnitPlatform()
    jvmArgs '-Dgroovy.grape.enable=false'
}


task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "ua.net.nlp.bruk.ReadXml"

    jvmArgs '-Dgroovy.grape.enable=false'

  //  args "--properties", propFile
}


eclipse {
    classpath {
      defaultOutputDir = file('build')
    }

    if( nlpUkProjectPresent ) {
        classpath {
            file {
                //  <classpathentry combineaccessrules="false" kind="src" path="/nlp_uk"/>
                whenMerged { classpath ->
                    // TODO: this is hack, should we use configurations instead?
                    logger.lifecycle "Using local Eclipse dependency for nlp_uk"


                    def gwtClasspath = entries.findAll { it.path.contains('nlp_uk') }
                    entries.removeAll gwtClasspath

                    def genSrc = new org.gradle.plugins.ide.eclipse.model.ProjectDependency('/nlp_uk')
                    classpath.entries.add(genSrc)
                }
            }
        }
    }
}